/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var miniSQLParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,9,26,34,40,57],$V1=[2,6],$V2=[1,13],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[6,26,34,36,38,39,40,57],$V7=[1,25],$V8=[1,42],$V9=[1,43],$Va=[1,33],$Vb=[1,29],$Vc=[1,34],$Vd=[1,35],$Ve=[1,38],$Vf=[1,40],$Vg=[1,41],$Vh=[11,16],$Vi=[13,16],$Vj=[1,54],$Vk=[13,16,33,35,42],$Vl=[1,55],$Vm=[13,16,33,35,42,44],$Vn=[1,57],$Vo=[1,58],$Vp=[1,59],$Vq=[1,60],$Vr=[1,61],$Vs=[1,62],$Vt=[13,14,16,33,35,42,44,49,50,51,52,53],$Vu=[1,63],$Vv=[1,64],$Vw=[13,14,16,33,35,42,44,49,50,51,52,53,67,70,72],$Vx=[1,65],$Vy=[1,66],$Vz=[13,14,16,33,35,42,44,49,50,51,52,53,67,68,70,72,74],$VA=[16,59],$VB=[26,34,36,38,39,40,57],$VC=[16,33],$VD=[13,14],$VE=[1,106],$VF=[1,107],$VG=[1,113],$VH=[1,114],$VI=[1,138],$VJ=[1,139],$VK=[1,128],$VL=[1,124],$VM=[1,129],$VN=[1,130],$VO=[1,131],$VP=[1,134],$VQ=[1,136],$VR=[1,137],$VS=[1,148],$VT=[13,33,42,66,67],$VU=[1,149],$VV=[13,33,42,44,66,67],$VW=[1,151],$VX=[1,152],$VY=[1,153],$VZ=[1,154],$V_=[1,155],$V$=[1,156],$V01=[13,14,33,42,44,49,50,51,52,53,66,67],$V11=[13,14,33,42,44,49,50,51,52,53,66,67,70,72],$V21=[1,159],$V31=[1,160],$V41=[13,14,33,42,44,49,50,51,52,53,66,67,68,70,72,74];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"main":3,"assignments":4,"statements":5,"EOF":6,"assignment":7,"statement":8,"DECLARE":9,"ids":10,"AS":11,"type":12,"SEMICOLON":13,"EQUALS":14,"value":15,"COMMA":16,"ID":17,"INT":18,"DECIMAL":19,"TEXT":20,"BOOLEAN":21,"setStatement":22,"ifStatement":23,"printStatement":24,"selectStatement":25,"SET":26,"idsAssignment":27,"idAssignment":28,"inputProd":29,"INPUT":30,"LPAREN":31,"TEXT_VALUE":32,"RPAREN":33,"IF":34,"THEN":35,"END":36,"elseIfStatements":37,"ELSEIF":38,"ELSE":39,"PRINT":40,"content":41,"OR":42,"e":43,"AND":44,"f":45,"NOT":46,"g":47,"h":48,"NOT_EQUALS":49,"LESS_THAN":50,"GREATER_THAN":51,"LESS_EQUALS":52,"GREATER_EQUALS":53,"number":54,"TRUE":55,"FALSE":56,"SELECT":57,"properties":58,"FROM":59,"NAME":60,"whereProd":61,"limitProd":62,"offSetProd":63,"WHERE":64,"whereValue":65,"LIMIT":66,"OFFSET":67,"TIMES":68,"propertyNames":69,"PLUS":70,"b":71,"MINUS":72,"c":73,"DIVIDE":74,"d":75,"INTEGER":76,"DOUBLE":77,"i":78,"j":79,"k":80,"m":81,"whereNumber":82,"x":83,"y":84,"z":85,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",9:"DECLARE",11:"AS",13:"SEMICOLON",14:"EQUALS",16:"COMMA",17:"ID",18:"INT",19:"DECIMAL",20:"TEXT",21:"BOOLEAN",26:"SET",30:"INPUT",31:"LPAREN",32:"TEXT_VALUE",33:"RPAREN",34:"IF",35:"THEN",36:"END",38:"ELSEIF",39:"ELSE",40:"PRINT",42:"OR",44:"AND",46:"NOT",49:"NOT_EQUALS",50:"LESS_THAN",51:"GREATER_THAN",52:"LESS_EQUALS",53:"GREATER_EQUALS",55:"TRUE",56:"FALSE",57:"SELECT",59:"FROM",60:"NAME",64:"WHERE",66:"LIMIT",67:"OFFSET",68:"TIMES",70:"PLUS",72:"MINUS",74:"DIVIDE",76:"INTEGER",77:"DOUBLE"},
productions_: [0,[3,3],[3,1],[4,2],[4,0],[5,2],[5,0],[7,5],[7,7],[10,3],[10,1],[12,1],[12,1],[12,1],[12,1],[8,2],[8,2],[8,2],[8,2],[22,2],[27,3],[27,1],[28,3],[28,3],[29,4],[23,6],[23,7],[37,5],[37,4],[37,2],[24,4],[41,3],[41,1],[15,3],[15,1],[43,3],[43,1],[45,2],[45,1],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,1],[48,1],[48,1],[48,1],[48,1],[25,4],[25,5],[25,5],[25,5],[61,2],[61,3],[61,3],[62,2],[62,3],[63,2],[58,1],[58,1],[69,3],[69,1],[54,3],[54,3],[54,1],[71,3],[71,3],[71,1],[73,2],[73,1],[75,1],[75,1],[75,1],[75,3],[65,3],[65,1],[78,3],[78,1],[79,2],[79,1],[80,3],[80,3],[80,3],[80,3],[80,3],[80,3],[80,1],[81,1],[81,1],[81,1],[81,1],[81,1],[82,3],[82,3],[82,1],[83,3],[83,3],[83,1],[84,2],[84,1],[85,1],[85,1],[85,1],[85,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    this.$ = $$[$0-2]; this.$.push(...$$[$0-1]);
    yy.MiniError.addLexicalError(lexicalErrors);lexicalErrors = [];
    return this.$;
  
break;
case 2:

    yy.MiniError.addError("Error: sint√°ctico. Token no esperado Linea: "+this._$.first_line+" Columna: "+this._$.first_column);
    yy.MiniError.addLexicalError(lexicalErrors);lexicalErrors = [];
  
break;
case 3: case 5:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 4: case 6:
this.$ = [];
break;
case 7:
this.$ = new yy.Declare(this._$.first_line,this._$.first_column,$$[$0-3], $$[$0-1]);
break;
case 8:
this.$ = new yy.Declare(this._$.first_line,this._$.first_column,$$[$0-5], $$[$0-3],$$[$0-1]);
break;
case 9:
this.$= $$[$0-2]; this.$.push($$[$0]);
break;
case 10: case 21: case 32:
this.$ = []; this.$.push($$[$0]);
break;
case 11:
this.$ = yy.VariableType.INT;
break;
case 12:
this.$ = yy.VariableType.DECIMAL;
break;
case 13:
this.$ = yy.VariableType.TEXT;
break;
case 14:
this.$ = yy.VariableType.BOOLEAN;
break;
case 15: case 16: case 17: case 18: case 75: case 105:
this.$ = $$[$0-1];
break;
case 19:
this.$ = new yy.Set(this._$.first_line, this._$.first_column, $$[$0]);
break;
case 20: case 31:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 22: case 23:
this.$ = new yy.Assignment(this._$.first_line, this._$.first_column, $$[$0-2],$$[$0]);
break;
case 24:
this.$ = new yy.Input(this._$.first_line, this._$.first_column, new yy.Value(this._$.first_line, this._$.first_column, yy.ValueType.TEXT_VALUE, $$[$0-1]));
break;
case 25:
this.$ = new yy.If(this._$.first_line, this._$.first_column, $$[$0-4],$$[$0-2]);
break;
case 26:
this.$ = new yy.If(this._$.first_line, this._$.first_column, $$[$0-5],$$[$0-3],$$[$0-2]);
break;
case 27:
this.$ = new yy.If(this._$.first_line, this._$.first_column, $$[$0-3],$$[$0-1],$$[$0]);
break;
case 28:
this.$ = new yy.If(this._$.first_line, this._$.first_column, $$[$0-2],$$[$0]);
break;
case 29:
this.$ = new yy.Else(this._$.first_line, this._$.first_column, $$[$0]);
break;
case 30:
this.$ = new yy.Print(this._$.first_line, this._$.first_column, $$[$0-1]);
break;
case 33: case 76:
this.$ = new yy.BinaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.OR, $$[$0-2],$$[$0]);
break;
case 34: case 36: case 38: case 45: case 46: case 66: case 69: case 71: case 89: case 101:
this.$ = $$[$0];
break;
case 35: case 78:
this.$ = new yy.BinaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.AND, $$[$0-2],$$[$0]);
break;
case 37: case 80:
this.$ = new yy.UnaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.NOT, $$[$0]);
break;
case 39: case 82:
this.$ = new yy.BinaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.EQUALS, $$[$0-2],$$[$0]);
break;
case 40: case 83:
this.$ = new yy.BinaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.NOT_EQUALS, $$[$0-2],$$[$0]);
break;
case 41: case 84:
this.$ = new yy.BinaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.LESS_THAN, $$[$0-2],$$[$0]);
break;
case 42: case 85:
this.$ = new yy.BinaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.GREATER_THAN, $$[$0-2],$$[$0]);
break;
case 43: case 86:
this.$ = new yy.BinaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.LESS_EQUALS, $$[$0-2],$$[$0]);
break;
case 44:
this.$ = new yy.BinaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.GREATER_EQUALS, $$[$0-2],$$[$0]);
break;
case 47: case 90: case 93:
this.$ = new yy.Value(this._$.first_line, this._$.first_column, yy.ValueType.TEXT_VALUE, $$[$0]);
break;
case 48: case 91:
this.$ = new yy.Value(this._$.first_line, this._$.first_column, yy.ValueType.BOOLEAN, true);
break;
case 49: case 92:
this.$ = new yy.Value(this._$.first_line, this._$.first_column, yy.ValueType.BOOLEAN, false);
break;
case 50: case 51: case 52: case 53:
this.$ = new yy.Select();
break;
case 64: case 94:
this.$ = new yy.BinaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.PLUS, $$[$0-2],$$[$0]);
break;
case 65: case 95:
this.$ = new yy.BinaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.MINUS, $$[$0-2],$$[$0]);
break;
case 67: case 97:
this.$ = new yy.BinaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.TIMES, $$[$0-2],$$[$0]);
break;
case 68: case 98:
this.$ = new yy.BinaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.DIVIDE, $$[$0-2],$$[$0]);
break;
case 70: case 100:
this.$ = new yy.UnaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.MINUS, $$[$0]);
break;
case 72: case 102:
this.$ = new yy.Value(this._$.first_line, this._$.first_column, yy.ValueType.INTEGER, $$[$0]);
break;
case 73: case 103:
this.$ = new yy.Value(this._$.first_line, this._$.first_column, yy.ValueType.DOUBLE, $$[$0]);
break;
case 74: case 104:
this.$ = new yy.Value(this._$.first_line, this._$.first_column, yy.ValueType.ID, $$[$0]);
break;
case 77: case 79: case 81: case 88: case 96: case 99:
this.$=$$[$0];
break;
}
},
table: [o($V0,[2,4],{3:1,4:2,2:[1,3]}),{1:[3]},o([6,26,34,40,57],$V1,{5:4,7:5,9:[1,6]}),{1:[2,2]},{6:[1,7],8:8,22:9,23:10,24:11,25:12,26:$V2,34:$V3,40:$V4,57:$V5},o($V0,[2,3]),{10:17,17:[1,18]},{1:[2,1]},o($V6,[2,5]),{13:[1,19]},{13:[1,20]},{13:[1,21]},{13:[1,22]},{17:$V7,27:23,28:24},{15:26,17:$V8,31:$V9,32:$Va,43:27,45:28,46:$Vb,47:30,48:31,54:32,55:$Vc,56:$Vd,71:36,72:$Ve,73:37,75:39,76:$Vf,77:$Vg},{31:[1,44]},{58:45,60:[1,48],68:[1,46],69:47},{11:[1,49],16:[1,50]},o($Vh,[2,10]),o($V6,[2,15]),o($V6,[2,16]),o($V6,[2,17]),o($V6,[2,18]),{13:[2,19],16:[1,51]},o($Vi,[2,21]),{14:[1,52]},{35:[1,53],42:$Vj},o($Vk,[2,34],{44:$Vl}),o($Vm,[2,36]),{17:$V8,31:$V9,32:$Va,47:56,48:31,54:32,55:$Vc,56:$Vd,71:36,72:$Ve,73:37,75:39,76:$Vf,77:$Vg},o($Vm,[2,38],{14:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs}),o($Vt,[2,45]),o($Vt,[2,46],{70:$Vu,72:$Vv}),o($Vt,[2,47]),o($Vt,[2,48]),o($Vt,[2,49]),o($Vw,[2,66],{68:$Vx,74:$Vy}),o($Vz,[2,69]),{17:$V8,31:$V9,75:67,76:$Vf,77:$Vg},o($Vz,[2,71]),o($Vz,[2,72]),o($Vz,[2,73]),o($Vz,[2,74]),{15:68,17:$V8,31:$V9,32:$Va,43:27,45:28,46:$Vb,47:30,48:31,54:32,55:$Vc,56:$Vd,71:36,72:$Ve,73:37,75:39,76:$Vf,77:$Vg},{15:70,17:$V8,31:$V9,32:$Va,41:69,43:27,45:28,46:$Vb,47:30,48:31,54:32,55:$Vc,56:$Vd,71:36,72:$Ve,73:37,75:39,76:$Vf,77:$Vg},{59:[1,71]},{59:[2,60]},{16:[1,72],59:[2,61]},o($VA,[2,63]),{12:73,18:[1,74],19:[1,75],20:[1,76],21:[1,77]},{17:[1,78]},{17:$V7,28:79},{15:80,17:$V8,29:81,30:[1,82],31:$V9,32:$Va,43:27,45:28,46:$Vb,47:30,48:31,54:32,55:$Vc,56:$Vd,71:36,72:$Ve,73:37,75:39,76:$Vf,77:$Vg},o($VB,$V1,{5:83}),{17:$V8,31:$V9,32:$Va,43:84,45:28,46:$Vb,47:30,48:31,54:32,55:$Vc,56:$Vd,71:36,72:$Ve,73:37,75:39,76:$Vf,77:$Vg},{17:$V8,31:$V9,32:$Va,45:85,46:$Vb,47:30,48:31,54:32,55:$Vc,56:$Vd,71:36,72:$Ve,73:37,75:39,76:$Vf,77:$Vg},o($Vm,[2,37],{14:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs}),{17:$V8,31:$V9,32:$Va,48:86,54:32,55:$Vc,56:$Vd,71:36,72:$Ve,73:37,75:39,76:$Vf,77:$Vg},{17:$V8,31:$V9,32:$Va,48:87,54:32,55:$Vc,56:$Vd,71:36,72:$Ve,73:37,75:39,76:$Vf,77:$Vg},{17:$V8,31:$V9,32:$Va,48:88,54:32,55:$Vc,56:$Vd,71:36,72:$Ve,73:37,75:39,76:$Vf,77:$Vg},{17:$V8,31:$V9,32:$Va,48:89,54:32,55:$Vc,56:$Vd,71:36,72:$Ve,73:37,75:39,76:$Vf,77:$Vg},{17:$V8,31:$V9,32:$Va,48:90,54:32,55:$Vc,56:$Vd,71:36,72:$Ve,73:37,75:39,76:$Vf,77:$Vg},{17:$V8,31:$V9,32:$Va,48:91,54:32,55:$Vc,56:$Vd,71:36,72:$Ve,73:37,75:39,76:$Vf,77:$Vg},{17:$V8,31:$V9,71:92,72:$Ve,73:37,75:39,76:$Vf,77:$Vg},{17:$V8,31:$V9,71:93,72:$Ve,73:37,75:39,76:$Vf,77:$Vg},{17:$V8,31:$V9,72:$Ve,73:94,75:39,76:$Vf,77:$Vg},{17:$V8,31:$V9,72:$Ve,73:95,75:39,76:$Vf,77:$Vg},o($Vz,[2,70]),{33:[1,96],42:$Vj},{16:[1,98],33:[1,97]},o($VC,[2,32],{42:$Vj}),{60:[1,99]},{60:[1,100]},{13:[1,101],14:[1,102]},o($VD,[2,11]),o($VD,[2,12]),o($VD,[2,13]),o($VD,[2,14]),o($Vh,[2,9]),o($Vi,[2,20]),o($Vi,[2,22],{42:$Vj}),o($Vi,[2,23]),{31:[1,103]},{8:8,22:9,23:10,24:11,25:12,26:$V2,34:$V3,36:[1,104],37:105,38:$VE,39:$VF,40:$V4,57:$V5},o($Vk,[2,33],{44:$Vl}),o($Vm,[2,35]),o($Vt,[2,39]),o($Vt,[2,40]),o($Vt,[2,41]),o($Vt,[2,42]),o($Vt,[2,43]),o($Vt,[2,44]),o($Vw,[2,64],{68:$Vx,74:$Vy}),o($Vw,[2,65],{68:$Vx,74:$Vy}),o($Vz,[2,67]),o($Vz,[2,68]),o($Vz,[2,75]),{13:[2,30]},{15:108,17:$V8,31:$V9,32:$Va,43:27,45:28,46:$Vb,47:30,48:31,54:32,55:$Vc,56:$Vd,71:36,72:$Ve,73:37,75:39,76:$Vf,77:$Vg},{13:[2,50],61:109,62:110,63:111,64:[1,112],66:$VG,67:$VH},o($VA,[2,62]),o($V0,[2,7]),{15:115,17:$V8,31:$V9,32:$Va,43:27,45:28,46:$Vb,47:30,48:31,54:32,55:$Vc,56:$Vd,71:36,72:$Ve,73:37,75:39,76:$Vf,77:$Vg},{32:[1,116]},{34:[1,117]},{36:[1,118]},{15:119,17:$V8,31:$V9,32:$Va,43:27,45:28,46:$Vb,47:30,48:31,54:32,55:$Vc,56:$Vd,71:36,72:$Ve,73:37,75:39,76:$Vf,77:$Vg},o([26,34,36,40,57],$V1,{5:120}),o($VC,[2,31],{42:$Vj}),{13:[2,51]},{13:[2,52]},{13:[2,53]},{17:$VI,31:$VJ,32:$VK,46:$VL,55:$VM,56:$VN,60:$VO,65:121,72:$VP,76:$VQ,77:$VR,78:122,79:123,80:125,81:126,82:127,83:132,84:133,85:135},{17:$V8,31:$V9,54:140,71:36,72:$Ve,73:37,75:39,76:$Vf,77:$Vg},{17:$V8,31:$V9,54:141,71:36,72:$Ve,73:37,75:39,76:$Vf,77:$Vg},{13:[1,142],42:$Vj},{33:[1,143]},{13:[2,25]},{34:[1,144]},{35:[1,145],42:$Vj},{8:8,22:9,23:10,24:11,25:12,26:$V2,34:$V3,36:[2,29],40:$V4,57:$V5},{13:[2,54],42:$VS,62:146,63:147,66:$VG,67:$VH},o($VT,[2,77],{44:$VU}),o($VV,[2,79]),{17:$VI,31:$VJ,32:$VK,55:$VM,56:$VN,60:$VO,72:$VP,76:$VQ,77:$VR,80:150,81:126,82:127,83:132,84:133,85:135},o($VV,[2,81],{14:$VW,49:$VX,50:$VY,51:$VZ,52:$V_,53:$V$}),o($V01,[2,88]),o($V01,[2,89],{70:[1,157],72:[1,158]}),o($V01,[2,90]),o($V01,[2,91]),o($V01,[2,92]),o($V01,[2,93]),o($V11,[2,96],{68:$V21,74:$V31}),o($V41,[2,99]),{17:$VI,31:$VJ,76:$VQ,77:$VR,85:161},o($V41,[2,101]),o($V41,[2,102]),o($V41,[2,103]),o($V41,[2,104]),{17:$VI,31:$VJ,32:$VK,46:$VL,55:$VM,56:$VN,60:$VO,65:162,72:$VP,76:$VQ,77:$VR,78:122,79:123,80:125,81:126,82:127,83:132,84:133,85:135},{13:[2,57],63:163,67:$VH,70:$Vu,72:$Vv},{13:[2,59],70:$Vu,72:$Vv},o($V0,[2,8]),o($Vi,[2,24]),{13:[2,26]},o($VB,$V1,{5:164}),{13:[2,55]},{13:[2,56]},{17:$VI,31:$VJ,32:$VK,46:$VL,55:$VM,56:$VN,60:$VO,72:$VP,76:$VQ,77:$VR,78:165,79:123,80:125,81:126,82:127,83:132,84:133,85:135},{17:$VI,31:$VJ,32:$VK,46:$VL,55:$VM,56:$VN,60:$VO,72:$VP,76:$VQ,77:$VR,79:166,80:125,81:126,82:127,83:132,84:133,85:135},o($VV,[2,80],{14:$VW,49:$VX,50:$VY,51:$VZ,52:$V_,53:$V$}),{17:$VI,31:$VJ,32:$VK,55:$VM,56:$VN,60:$VO,72:$VP,76:$VQ,77:$VR,81:167,82:127,83:132,84:133,85:135},{17:$VI,31:$VJ,32:$VK,55:$VM,56:$VN,60:$VO,72:$VP,76:$VQ,77:$VR,81:168,82:127,83:132,84:133,85:135},{17:$VI,31:$VJ,32:$VK,55:$VM,56:$VN,60:$VO,72:$VP,76:$VQ,77:$VR,81:169,82:127,83:132,84:133,85:135},{17:$VI,31:$VJ,32:$VK,55:$VM,56:$VN,60:$VO,72:$VP,76:$VQ,77:$VR,81:170,82:127,83:132,84:133,85:135},{17:$VI,31:$VJ,32:$VK,55:$VM,56:$VN,60:$VO,72:$VP,76:$VQ,77:$VR,81:171,82:127,83:132,84:133,85:135},{17:$VI,31:$VJ,32:$VK,55:$VM,56:$VN,60:$VO,72:$VP,76:$VQ,77:$VR,81:172,82:127,83:132,84:133,85:135},{17:$VI,31:$VJ,72:$VP,76:$VQ,77:$VR,83:173,84:133,85:135},{17:$VI,31:$VJ,72:$VP,76:$VQ,77:$VR,83:174,84:133,85:135},{17:$VI,31:$VJ,72:$VP,76:$VQ,77:$VR,84:175,85:135},{17:$VI,31:$VJ,72:$VP,76:$VQ,77:$VR,84:176,85:135},o($V41,[2,100]),{33:[1,177],42:$VS},{13:[2,58]},{8:8,22:9,23:10,24:11,25:12,26:$V2,34:$V3,36:[2,28],37:178,38:$VE,39:$VF,40:$V4,57:$V5},o($VT,[2,76],{44:$VU}),o($VV,[2,78]),o($V01,[2,82]),o($V01,[2,83]),o($V01,[2,84]),o($V01,[2,85]),o($V01,[2,86]),o($V01,[2,87]),o($V11,[2,94],{68:$V21,74:$V31}),o($V11,[2,95],{68:$V21,74:$V31}),o($V41,[2,97]),o($V41,[2,98]),o($V41,[2,105]),{36:[2,27]}],
defaultActions: {3:[2,2],7:[2,1],46:[2,60],97:[2,30],109:[2,51],110:[2,52],111:[2,53],117:[2,25],144:[2,26],146:[2,55],147:[2,56],163:[2,58],178:[2,27]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  let lexicalErrors = [];

  function addLexicalError(errorMessage){
    lexicalErrors.push(errorMessage);
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:return "DECLARE";
break;
case 3:return "INT";
break;
case 4:return "DECIMAL";
break;
case 5:return "TEXT";
break;
case 6:return "BOOLEAN";
break;
case 7:return "TRUE";
break;
case 8:return "FALSE";
break;
case 9:return "DOUBLE";
break;
case 10:return "INTEGER";
break;
case 11:return "COMMA";
break;
case 12:return "SEMICOLON";
break;
case 13:return "AS";
break;
case 14:return "SET";
break;
case 15:return "AND";
break;
case 16:return "INPUT";
break;
case 17:return "PRINT";
break;
case 18:return "IF";
break;
case 19:return "ELSEIF";
break;
case 20:return "ELSE";
break;
case 21:return "END";
break;
case 22:return "THEN";
break;
case 23:return "SELECT";
break;
case 24:return "FROM";
break;
case 25:return "WHERE";
break;
case 26:return "LIMIT";
break;
case 27:return "OFFSET";
break;
case 28:return "LPAREN";
break;
case 29:return "RPAREN";
break;
case 30:return "PLUS";
break;
case 31:return "MINUS";
break;
case 32:return "TIMES";
break;
case 33:return "DIVIDE";
break;
case 34:return "NOT_EQUALS";
break;
case 35:return "GREATER_EQUALS";
break;
case 36:return "LESS_EQUALS";
break;
case 37:return "LESS_THAN";
break;
case 38:return "GREATER_THAN";
break;
case 39:return "EQUALS";
break;
case 40:return "NOT";
break;
case 41:return "AND";
break;
case 42:return "OR";
break;
case 43:return "ID";
break;
case 44:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);return "TEXT_VALUE";
break;
case 45:return "NAME";
break;
case 46:return "EOF";
break;
case 47:
                      console.log("Agregando error lexico.");
                      addLexicalError("Error: l√©xico. "+yy_.yytext+" No forma parte del lenguaje Linea: "+yy_.yylloc.first_line+" Columna: "+yy_.yylloc.first_column);
                    
break;
}
},
rules: [/^(?:((\r|\n|\r\n)|[ \t\f]))/,/^(?:((--)[^\r\n]*))/,/^(?:(DECLARE\b))/,/^(?:(INT\b))/,/^(?:(DECIMAL\b))/,/^(?:(TEXT\b))/,/^(?:(BOOLEAN\b))/,/^(?:(TRUE\b))/,/^(?:(FALSE\b))/,/^(?:([0-9]+\.[0-9]+))/,/^(?:([0-9]+))/,/^(?:(,))/,/^(?:(;))/,/^(?:(AS\b))/,/^(?:(SET\b))/,/^(?:(AND\b))/,/^(?:(INPUT\b))/,/^(?:(PRINT\b))/,/^(?:(IF\b))/,/^(?:(ELSEIF\b))/,/^(?:(ELSE\b))/,/^(?:(END\b))/,/^(?:(THEN\b))/,/^(?:(SELECT\b))/,/^(?:(FROM\b))/,/^(?:(WHERE\b))/,/^(?:(LIMIT\b))/,/^(?:(OFFSET\b))/,/^(?:(\())/,/^(?:(\)))/,/^(?:(\+))/,/^(?:(-))/,/^(?:(\*))/,/^(?:(\/))/,/^(?:(<>))/,/^(?:(>=))/,/^(?:(<=))/,/^(?:(<))/,/^(?:(>))/,/^(?:(=))/,/^(?:(NOT\b))/,/^(?:(AND\b))/,/^(?:(OR\b))/,/^(?:([@][a-zA-Z][a-zA-Z0-9_]*))/,/^(?:(("[^\"]*")|('[^\']*')))/,/^(?:(([a-zA-Z])[a-zA-Z0-9_]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = miniSQLParser;
exports.Parser = miniSQLParser.Parser;
exports.parse = function () { return miniSQLParser.parse.apply(miniSQLParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}