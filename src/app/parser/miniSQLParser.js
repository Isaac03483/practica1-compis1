/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var miniSQLParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,12],$V2=[1,13],$V3=[1,14],$V4=[1,15],$V5=[9,26,33,39,57],$V6=[6,26,33,35,37,38,39,57],$V7=[1,28],$V8=[1,47],$V9=[1,40],$Va=[1,36],$Vb=[1,32],$Vc=[1,37],$Vd=[1,38],$Ve=[1,39],$Vf=[1,43],$Vg=[1,45],$Vh=[1,46],$Vi=[11,16],$Vj=[13,16],$Vk=[1,59],$Vl=[13,16,32,34,41,64,65],$Vm=[1,60],$Vn=[13,16,32,34,41,43,64,65],$Vo=[1,62],$Vp=[1,63],$Vq=[1,64],$Vr=[1,65],$Vs=[1,66],$Vt=[1,67],$Vu=[13,14,16,32,34,41,43,48,49,50,51,52,64,65],$Vv=[1,68],$Vw=[1,69],$Vx=[1,71],$Vy=[13,14,16,32,34,41,43,48,49,50,51,52,64,65,68,70],$Vz=[1,72],$VA=[1,73],$VB=[13,14,16,32,34,41,43,48,49,50,51,52,64,65,66,68,70,72],$VC=[1,75],$VD=[16,59],$VE=[16,32],$VF=[13,14],$VG=[1,113],$VH=[1,114],$VI=[1,120],$VJ=[1,121];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"main":3,"assignments":4,"statements":5,"EOF":6,"assignment":7,"statement":8,"DECLARE":9,"ids":10,"AS":11,"type":12,"SEMICOLON":13,"EQUALS":14,"value":15,"COMMA":16,"ID":17,"INT":18,"DECIMAL":19,"TEXT":20,"BOOLEAN":21,"setStatement":22,"ifStatement":23,"printStatement":24,"selectStatement":25,"SET":26,"idsAssignment":27,"idAssignment":28,"INPUT":29,"LPAREN":30,"TEXT_VALUE":31,"RPAREN":32,"IF":33,"THEN":34,"END":35,"elseIfStatements":36,"ELSEIF":37,"ELSE":38,"PRINT":39,"content":40,"OR":41,"e":42,"AND":43,"f":44,"NOT":45,"g":46,"h":47,"NOT_EQUALS":48,"LESS_THAN":49,"GREATER_THAN":50,"LESS_EQUALS":51,"GREATER_EQUALS":52,"number":53,"TRUE":54,"FALSE":55,"NAME":56,"SELECT":57,"properties":58,"FROM":59,"whereProd":60,"limitProd":61,"offSetProd":62,"WHERE":63,"LIMIT":64,"OFFSET":65,"TIMES":66,"propertyNames":67,"PLUS":68,"b":69,"MINUS":70,"c":71,"DIVIDE":72,"d":73,"INTEGER":74,"DOUBLE":75,"a":76,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",9:"DECLARE",11:"AS",13:"SEMICOLON",14:"EQUALS",16:"COMMA",17:"ID",18:"INT",19:"DECIMAL",20:"TEXT",21:"BOOLEAN",26:"SET",29:"INPUT",30:"LPAREN",31:"TEXT_VALUE",32:"RPAREN",33:"IF",34:"THEN",35:"END",37:"ELSEIF",38:"ELSE",39:"PRINT",41:"OR",43:"AND",45:"NOT",48:"NOT_EQUALS",49:"LESS_THAN",50:"GREATER_THAN",51:"LESS_EQUALS",52:"GREATER_EQUALS",54:"TRUE",55:"FALSE",56:"NAME",57:"SELECT",59:"FROM",63:"WHERE",64:"LIMIT",65:"OFFSET",66:"TIMES",68:"PLUS",70:"MINUS",72:"DIVIDE",74:"INTEGER",75:"DOUBLE",76:"a"},
productions_: [0,[3,3],[3,2],[3,1],[4,2],[4,1],[5,2],[5,1],[7,5],[7,7],[10,3],[10,1],[12,1],[12,1],[12,1],[12,1],[8,2],[8,2],[8,2],[8,2],[22,2],[27,3],[27,1],[28,3],[28,6],[23,6],[23,7],[36,5],[36,4],[36,2],[24,4],[40,3],[40,1],[15,3],[15,1],[42,3],[42,1],[44,2],[44,1],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,3],[25,4],[25,5],[25,5],[25,5],[60,2],[60,3],[60,3],[61,2],[61,3],[62,2],[58,1],[58,1],[67,3],[67,1],[53,3],[53,3],[53,1],[69,3],[69,3],[69,1],[71,2],[71,1],[73,1],[73,1],[73,1],[73,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 8:
this.$ = new yy.Declare();
break;
case 10:
this.$= $$[$0-2]; this.$.push($$[$0]);
break;
case 11:
this.$ = []; this.$.push($$[$0]);
break;
case 74:
this.$ = new yy.Value(this._$.first_line, this._$.first_column, yy.ValueType.INTEGER, $$[$0]);
break;
case 75:
this.$ = new yy.Value(this._$.first_line, this._$.first_column, yy.ValueType.DOUBLE, $$[$0]);
break;
case 76:
this.$ = new yy.Value(this._$.first_line, this._$.first_column, yy.ValueType.ID, $$[$0]);
break;
case 77:
this.$ = $$[$0-1];
break;
}
},
table: [{3:1,4:2,5:3,6:[1,4],7:5,8:6,9:$V0,22:8,23:9,24:10,25:11,26:$V1,33:$V2,39:$V3,57:$V4},{1:[3]},{5:16,7:17,8:6,9:$V0,22:8,23:9,24:10,25:11,26:$V1,33:$V2,39:$V3,57:$V4},{6:[1,18],8:19,22:8,23:9,24:10,25:11,26:$V1,33:$V2,39:$V3,57:$V4},{1:[2,3]},o($V5,[2,5]),o($V6,[2,7]),{10:20,17:[1,21]},{13:[1,22]},{13:[1,23]},{13:[1,24]},{13:[1,25]},{17:$V7,27:26,28:27},{15:29,17:$V8,30:$V9,31:$Va,42:30,44:31,45:$Vb,46:33,47:34,53:35,54:$Vc,55:$Vd,56:$Ve,69:41,70:$Vf,71:42,73:44,74:$Vg,75:$Vh},{30:[1,48]},{56:[1,52],58:49,66:[1,50],67:51},{6:[1,53],8:19,22:8,23:9,24:10,25:11,26:$V1,33:$V2,39:$V3,57:$V4},o($V5,[2,4]),{1:[2,2]},o($V6,[2,6]),{11:[1,54],16:[1,55]},o($Vi,[2,11]),o($V6,[2,16]),o($V6,[2,17]),o($V6,[2,18]),o($V6,[2,19]),{13:[2,20],16:[1,56]},o($Vj,[2,22]),{14:[1,57]},{34:[1,58],41:$Vk},o($Vl,[2,34],{43:$Vm}),o($Vn,[2,36]),{17:$V8,30:$V9,31:$Va,46:61,47:34,53:35,54:$Vc,55:$Vd,56:$Ve,69:41,70:$Vf,71:42,73:44,74:$Vg,75:$Vh},o($Vn,[2,38],{14:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt}),o($Vu,[2,45]),o($Vu,[2,46],{68:$Vv,70:$Vw}),o($Vu,[2,47]),o($Vu,[2,48]),o($Vu,[2,49]),o($Vu,[2,50]),{15:70,17:$V8,30:$V9,31:$Va,42:30,44:31,45:$Vb,46:33,47:34,53:35,54:$Vc,55:$Vd,56:$Ve,69:41,70:$Vf,71:42,73:44,74:$Vg,75:$Vh,76:$Vx},o($Vy,[2,68],{66:$Vz,72:$VA}),o($VB,[2,71]),{17:$V8,30:$VC,73:74,74:$Vg,75:$Vh},o($VB,[2,73]),o($VB,[2,74]),o($VB,[2,75]),o($VB,[2,76]),{15:77,17:$V8,30:$V9,31:$Va,40:76,42:30,44:31,45:$Vb,46:33,47:34,53:35,54:$Vc,55:$Vd,56:$Ve,69:41,70:$Vf,71:42,73:44,74:$Vg,75:$Vh},{59:[1,78]},{59:[2,62]},{16:[1,79],59:[2,63]},o($VD,[2,65]),{1:[2,1]},{12:80,18:[1,81],19:[1,82],20:[1,83],21:[1,84]},{17:[1,85]},{17:$V7,28:86},{15:87,17:$V8,29:[1,88],30:$V9,31:$Va,42:30,44:31,45:$Vb,46:33,47:34,53:35,54:$Vc,55:$Vd,56:$Ve,69:41,70:$Vf,71:42,73:44,74:$Vg,75:$Vh},{5:89,8:6,22:8,23:9,24:10,25:11,26:$V1,33:$V2,39:$V3,57:$V4},{17:$V8,30:$V9,31:$Va,42:90,44:31,45:$Vb,46:33,47:34,53:35,54:$Vc,55:$Vd,56:$Ve,69:41,70:$Vf,71:42,73:44,74:$Vg,75:$Vh},{17:$V8,30:$V9,31:$Va,44:91,45:$Vb,46:33,47:34,53:35,54:$Vc,55:$Vd,56:$Ve,69:41,70:$Vf,71:42,73:44,74:$Vg,75:$Vh},o($Vn,[2,37],{14:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt}),{17:$V8,30:$V9,31:$Va,47:92,53:35,54:$Vc,55:$Vd,56:$Ve,69:41,70:$Vf,71:42,73:44,74:$Vg,75:$Vh},{17:$V8,30:$V9,31:$Va,47:93,53:35,54:$Vc,55:$Vd,56:$Ve,69:41,70:$Vf,71:42,73:44,74:$Vg,75:$Vh},{17:$V8,30:$V9,31:$Va,47:94,53:35,54:$Vc,55:$Vd,56:$Ve,69:41,70:$Vf,71:42,73:44,74:$Vg,75:$Vh},{17:$V8,30:$V9,31:$Va,47:95,53:35,54:$Vc,55:$Vd,56:$Ve,69:41,70:$Vf,71:42,73:44,74:$Vg,75:$Vh},{17:$V8,30:$V9,31:$Va,47:96,53:35,54:$Vc,55:$Vd,56:$Ve,69:41,70:$Vf,71:42,73:44,74:$Vg,75:$Vh},{17:$V8,30:$V9,31:$Va,47:97,53:35,54:$Vc,55:$Vd,56:$Ve,69:41,70:$Vf,71:42,73:44,74:$Vg,75:$Vh},{17:$V8,30:$VC,69:98,70:$Vf,71:42,73:44,74:$Vg,75:$Vh},{17:$V8,30:$VC,69:99,70:$Vf,71:42,73:44,74:$Vg,75:$Vh},{32:[1,100],41:$Vk},{32:[1,101]},{17:$V8,30:$VC,70:$Vf,71:102,73:44,74:$Vg,75:$Vh},{17:$V8,30:$VC,70:$Vf,71:103,73:44,74:$Vg,75:$Vh},o($VB,[2,72]),{76:$Vx},{16:[1,105],32:[1,104]},o($VE,[2,32],{41:$Vk}),{56:[1,106]},{56:[1,107]},{13:[1,108],14:[1,109]},o($VF,[2,12]),o($VF,[2,13]),o($VF,[2,14]),o($VF,[2,15]),o($Vi,[2,10]),o($Vj,[2,21]),o($Vj,[2,23],{41:$Vk}),{30:[1,110]},{8:19,22:8,23:9,24:10,25:11,26:$V1,33:$V2,35:[1,111],36:112,37:$VG,38:$VH,39:$V3,57:$V4},o($Vl,[2,33],{43:$Vm}),o($Vn,[2,35]),o($Vu,[2,39]),o($Vu,[2,40]),o($Vu,[2,41]),o($Vu,[2,42]),o($Vu,[2,43]),o($Vu,[2,44]),o($Vy,[2,66],{66:$Vz,72:$VA}),o($Vy,[2,67],{66:$Vz,72:$VA}),o($Vu,[2,51]),o($VB,[2,77]),o($VB,[2,69]),o($VB,[2,70]),{13:[2,30]},{15:115,17:$V8,30:$V9,31:$Va,42:30,44:31,45:$Vb,46:33,47:34,53:35,54:$Vc,55:$Vd,56:$Ve,69:41,70:$Vf,71:42,73:44,74:$Vg,75:$Vh},{13:[2,52],60:116,61:117,62:118,63:[1,119],64:$VI,65:$VJ},o($VD,[2,64]),o($V5,[2,8]),{15:122,17:$V8,30:$V9,31:$Va,42:30,44:31,45:$Vb,46:33,47:34,53:35,54:$Vc,55:$Vd,56:$Ve,69:41,70:$Vf,71:42,73:44,74:$Vg,75:$Vh},{31:[1,123]},{33:[1,124]},{35:[1,125]},{15:126,17:$V8,30:$V9,31:$Va,42:30,44:31,45:$Vb,46:33,47:34,53:35,54:$Vc,55:$Vd,56:$Ve,69:41,70:$Vf,71:42,73:44,74:$Vg,75:$Vh},{5:127,8:6,22:8,23:9,24:10,25:11,26:$V1,33:$V2,39:$V3,57:$V4},o($VE,[2,31],{41:$Vk}),{13:[2,53]},{13:[2,54]},{13:[2,55]},{15:128,17:$V8,30:$V9,31:$Va,42:30,44:31,45:$Vb,46:33,47:34,53:35,54:$Vc,55:$Vd,56:$Ve,69:41,70:$Vf,71:42,73:44,74:$Vg,75:$Vh},{17:$V8,30:$VC,53:129,69:41,70:$Vf,71:42,73:44,74:$Vg,75:$Vh},{17:$V8,30:$VC,53:130,69:41,70:$Vf,71:42,73:44,74:$Vg,75:$Vh},{13:[1,131],41:$Vk},{32:[1,132]},{13:[2,25]},{33:[1,133]},{34:[1,134],41:$Vk},{8:19,22:8,23:9,24:10,25:11,26:$V1,33:$V2,35:[2,29],39:$V3,57:$V4},{13:[2,56],41:$Vk,61:135,62:136,64:$VI,65:$VJ},{13:[2,59],62:137,65:$VJ,68:$Vv,70:$Vw},{13:[2,61],68:$Vv,70:$Vw},o($V5,[2,9]),o($Vj,[2,24]),{13:[2,26]},{5:138,8:6,22:8,23:9,24:10,25:11,26:$V1,33:$V2,39:$V3,57:$V4},{13:[2,57]},{13:[2,58]},{13:[2,60]},{8:19,22:8,23:9,24:10,25:11,26:$V1,33:$V2,35:[2,28],36:139,37:$VG,38:$VH,39:$V3,57:$V4},{35:[2,27]}],
defaultActions: {4:[2,3],18:[2,2],50:[2,62],53:[2,1],104:[2,30],116:[2,53],117:[2,54],118:[2,55],124:[2,25],133:[2,26],135:[2,57],136:[2,58],137:[2,60],139:[2,27]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:return "DECLARE";
break;
case 3:return "INT";
break;
case 4:return "DECIMAL";
break;
case 5:return "TEXT";
break;
case 6:return "BOOLEAN";
break;
case 7:return "TRUE";
break;
case 8:return "FALSE";
break;
case 9:return "DOUBLE";
break;
case 10:return "INTEGER";
break;
case 11:return "COMMA";
break;
case 12:return "SEMICOLON";
break;
case 13:return "AS";
break;
case 14:return "SET";
break;
case 15:return "AND";
break;
case 16:return "INPUT";
break;
case 17:return "PRINT";
break;
case 18:return "IF";
break;
case 19:return "ELSEIF";
break;
case 20:return "ELSE";
break;
case 21:return "END";
break;
case 22:return "THEN";
break;
case 23:return "SELECT";
break;
case 24:return "FROM";
break;
case 25:return "WHERE";
break;
case 26:return "LIMIT";
break;
case 27:return "OFFSET";
break;
case 28:return "LPAREN";
break;
case 29:return "RPAREN";
break;
case 30:return "PLUS";
break;
case 31:return "MINUS";
break;
case 32:return "TIMES";
break;
case 33:return "DIVIDE";
break;
case 34:return "NOT_EQUALS";
break;
case 35:return "GREATER_EQUALS";
break;
case 36:return "LESS_EQUALS";
break;
case 37:return "LESS_THAN";
break;
case 38:return "GREATER_THAN";
break;
case 39:return "EQUALS";
break;
case 40:return "NOT";
break;
case 41:return "AND";
break;
case 42:return "OR";
break;
case 43:return "ID";
break;
case 44:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);return "TEXT_VALUE";
break;
case 45:return "NAME";
break;
case 46:return "EOF";
break;
case 47:console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:((\r|\n|\r\n)|[ \t\f]))/,/^(?:((--)[^\r\n]*))/,/^(?:(DECLARE\b))/,/^(?:(INT\b))/,/^(?:(DECIMAL\b))/,/^(?:(TEXT\b))/,/^(?:(BOOLEAN\b))/,/^(?:(TRUE\b))/,/^(?:(FALSE\b))/,/^(?:([0-9]+\.[0-9]+))/,/^(?:([0-9]+))/,/^(?:(,))/,/^(?:(;))/,/^(?:(AS\b))/,/^(?:(SET\b))/,/^(?:(AND\b))/,/^(?:(INPUT\b))/,/^(?:(PRINT\b))/,/^(?:(IF\b))/,/^(?:(ELSEIF\b))/,/^(?:(ELSE\b))/,/^(?:(END\b))/,/^(?:(THEN\b))/,/^(?:(SELECT\b))/,/^(?:(FROM\b))/,/^(?:(WHERE\b))/,/^(?:(LIMIT\b))/,/^(?:(OFFSET\b))/,/^(?:(\())/,/^(?:(\)))/,/^(?:(\+))/,/^(?:(-))/,/^(?:(\*))/,/^(?:(\/))/,/^(?:(<>))/,/^(?:(>=))/,/^(?:(<=))/,/^(?:(<))/,/^(?:(>))/,/^(?:(=))/,/^(?:(NOT\b))/,/^(?:(AND\b))/,/^(?:(OR\b))/,/^(?:([@][a-zA-Z][a-zA-Z0-9_]*))/,/^(?:(("[^\"]*")|('[^\']*')))/,/^(?:(([a-zA-Z])[a-zA-Z0-9_]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = miniSQLParser;
exports.Parser = miniSQLParser.Parser;
exports.parse = function () { return miniSQLParser.parse.apply(miniSQLParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}